package org.opensha.gmm;

import static java.lang.Math.log;
import static java.lang.Math.min;
import static org.opensha.gmm.FaultStyle.REVERSE;

import org.opensha.calc.ScalarGroundMotion;

/**
 * Implementation of the Idriss (2013) next generation attenuation relationship
 * developed as part of NGA West II.
 * 
 * <p>Implementation notes: Idriss (2013) recommends a cap of Vs=1200m/s
 * (implemented) and a distance limit of 150km (not implemented).</p>
 * 
 * <p>Implementation notes: 0.01s SA values used for PGA.</p>
 * 
 * <p>See: Idriss, I.M., 2013, NGA-West2 model for estimating average horizontal
 * values of pseudo-absolute spectral accelerations generated by crustal
 * earthquakes, PEER Report 2013/08.</p>
 * 
 * <p>See: <a href="http://peer.berkeley.edu/ngawest2/final-products/">NGA-West2
 * Final Products</a></p>
 * 
 * <p>Component: RotD50 (average horizontal)</p>
 * 
 * @author Peter Powers
 */
final class Idriss_2013 implements GroundMotionModel {

	public static final String NAME = "Idriss (2013)";
	
	public static final CoefficientContainer CC = new CoefficientContainer(
		"Idriss13loM.csv", Coeffs.class);
	static final CoefficientContainer CC_HI = new CoefficientContainer(
		"Idriss13hiM.csv", Coeffs.class);
	
	static class Coeffs extends Coefficients {
		double a1, a2, a3, b1, b2, xi, gamma, phi;
	}
	
	private final Coeffs coeffsLo;
	private final Coeffs coeffsHi;

	Idriss_2013(IMT imt) {
		coeffsLo = (Coeffs) CC.get(imt);
		coeffsHi = (Coeffs) CC_HI.get(imt);
	}

	@Override
	public final ScalarGroundMotion calc(GMM_Input props) {
		FaultStyle style = rakeToFaultStyle(props.rake);
		Coeffs coeffs = (props.Mw <= 6.75) ? coeffsLo : coeffsHi;
		return calc(coeffs, props.Mw, props.rRup, style, props.vs30);
	}
	
	FaultStyle rakeToFaultStyle(double rake) {
		return GMM_Utils.rakeToFaultStyle_NSHMP(rake);
	}
	
	private static final ScalarGroundMotion calc(Coeffs c,
			double Mw, double rRup, FaultStyle style, double vs30) {

		double mean = calcMean(c, Mw, rRup, style, vs30);
		double stdDev = calcStdDev(c, Mw);

		return DefaultScalarGroundMotion.create(mean, stdDev);
	}
	
	// Mean ground motion model - cap of Vs = 1200 m/s
	private static final double calcMean(Coeffs c, double Mw, double rRup,
			FaultStyle style, double vs30) {
		return c.a1 + c.a2 * Mw + c.a3 * (8.5 - Mw) * (8.5 - Mw) -
			(c.b1 + c.b2 * Mw) * log(rRup + 10.0) +
			c.xi * log(min(vs30, 1200.0)) + 
			c.gamma * rRup + (style == REVERSE ? c.phi : 0.0);
	}

	// Aleatory uncertainty model
	private static final double calcStdDev(Coeffs c, double Mw) {
		double s1 = 0.035;
		Double T = c.imt.getPeriod();
		s1 *= (T == null || T <= 0.05) ? log(0.05) : (T < 3.0) ? log(T)
			: log(3d);
		double s2 = 0.06;
		s2 *= (Mw <= 5.0) ? 5.0 : (Mw < 7.5) ? Mw : 7.5;
		return 1.18 + s1 - s2;
	}
	
}
